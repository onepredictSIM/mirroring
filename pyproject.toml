[tool.poetry]
name = "lg-ensol-be"
version = "0.1.0"
description = ""
authors = ["kbpark-onepredict <kibum.park@onepredict.com>"]

[tool.poetry.dependencies]
python = "^3.9"
zstd = "^1.5.2"
SQLAlchemy = "^1.4.42"
pydantic = "^1.10.2"
python-dotenv = "^0.21.0"
pymssql = "^2.2.5"
boto3 = "^1.24.91"
fastapi = "^0.85.1"
uvicorn = "^0.18.3"
psycopg2-binary = "^2.9.5"
numpy = "^1.23.4"
pytz = "^2022.6"
SQLAlchemy-Utils = "^0.38.3"
PyYAML = "^6.0"
requests = "^2.28.2"
ruff = "^0.0.261"
types-pytz = "^2023.3.0"
types-PyYAML = "^6.0.12"

[tool.poetry.dev-dependencies]
pytest = "^7.1.0"
pytest-cov = "^3.0.0"
black = {extras = ["jupyter"], version = "^22.6.0"}
isort = "^5.10.1"
mypy = "^0.942"
flake8 = "^4.0.1"
pre-commit = "^2.17.0"
flakeheaven = "^2.0.0"
wemake-python-styleguide = "^0.16.1"
jupyter = "^1.0.0"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py39", "py310"]
exclude = [".venv", "__pycache__", ".git"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = "True"
use_parentheses ="True"


[tool.ruff]
line-length = 90
target-version = "py39"
src = ["project", "lib"]
fix = true
format = "text"
select = [
  "E",   # pycodestyle
  "F",   # pyflakes error
  "W",   # pyflakes warning
  "UP",  # pyupgrade
  "D",   # pydocstyle
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "S",   # flake8-bandit
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "COM", # flake8-commas
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G",   # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "PT",  # flake8-pytest-style
  "Q",   # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-raise
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "TCH", # flake8-type-checking
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  "PD",  # pandas-vet
  "PGH", # pygrep-hooks
  "PL",  # pylint
  "TRY", # tryceratops
  "NPY", # NumPy-specific rules
  "RUF", # Ruff-specific rules
]

ignore = ["D104", # lint about __init__.py
        "TRY400", # use logging.exception instad of logging.error
        "BLE001", # Do not catch blind exception "Exception"
        "G002", # Logging statement uses %
        "TRY003", #Avoid specifying long messages outside the exception class
        "EM101", #Exception must not use a string literal.
        "A003", #class attribute id is shadowing a python builtin.
        "ANN101", #Missing type annotation for 'cls', 'self'
        "ANN102", #Missing type annotation for 'cls' in classmethod
        "ANN401", #Dynamically typed expression are disallowed in '__getitem__'
        "N805", #First argument of a method should be named 'self'
        "RET505", #Unnecessary 'elif' after 'return' statement
        "EM102", #Exception must not use an f-string literal, assign to variable first
        "RET504", #unncessary variable assignment before 'return' assignment
        "PIE804", #unncessary 'dict' kwargs
        "N803", #argument name should be lowercase.
        "PIE810", #Call 'endswith' once with a tuple
        'S101', #Use of 'assert' detected
        'G004', #Logging statement uses f-string
        "INP001", #is a part of an implicit namespace package.
        "B023", #Function definition does not bind loop variable
        "B008", #Do not perform function call Depends in argument defaults
        ]

exclude = ["tests/",
          "app/core/logger.py",
          "app/api/api_v1/endpoints/test.py",
          "app/api/crud/interface.py",
          "app/total_db_init.py"]

[tool.ruff.pydocstyle]
convention = "google"


[tool.mypy]
python_version = 3.9
show_error_context = "True"
show_column_numbers = "True"
show_error_codes = "True"
pretty = "True"
disallow_untyped_defs = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_unused_ignores = "True"
ignore_missing_imports = "True"
disable_error_code = [
    "union-attr",
]
exclude = [
    "app/core/logger.py",
    "app/schemas/dashboard.py", #duplicate module name error
    "app/schemas/detail.py", #duplicate module name error
    "app/api/api_v1/endpoints/test.py", #minio 부하테스트 때 사용했던 파일.
    "app/api/crud/interface.py",
    "tests/",
    "app/total_db_init.py",
]

[tool.pytest.ini_options]
pythonpath = "app"
addopts = "--cov-report term-missing --cov=apps"
